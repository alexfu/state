plugins {
    id("com.adarshr.test-logger").version("3.2.0").apply(false)
    id("org.jetbrains.kotlin.jvm").version("1.9.0")
}

allprojects {
    group "com.alexfu.state"
    version "0.1.3"

    plugins.apply("maven-publish")
    plugins.apply("com.adarshr.test-logger")

    afterEvaluate {
        testlogger {
            theme 'mocha'
        }

        publishing {
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/alexfu/state")
                    credentials {
                        def env = System.getenv()
                        if (env.containsKey("CI") && env.get("CI") == "true") {
                            username = env.get("PUBLISHING_USERNAME")
                            password = env.get("PUBLISHING_PASSWORD")
                        } else {
                            def publishingProps = new Properties()
                            rootProject.file("publishing.properties").withReader {
                                publishingProps.load(it)
                            }
                            username = publishingProps.getProperty("user")
                            password = publishingProps.getProperty("password")
                        }
                    }
                }
            }
            publications {
                gpr(MavenPublication) {
                    from(components.java)
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1'
    testImplementation "org.junit.jupiter:junit-jupiter"
    testImplementation("io.strikt:strikt-jvm")
    testImplementation(platform("io.strikt:strikt-bom:0.31.0"))
    testImplementation(platform("org.junit:junit-bom:5.7.2"))
    testImplementation("app.cash.turbine:turbine:0.5.1")
}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

java {
    withSourcesJar()
}